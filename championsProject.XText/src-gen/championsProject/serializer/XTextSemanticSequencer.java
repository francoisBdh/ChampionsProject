/*
 * generated by Xtext 2.12.0
 */
package championsProject.serializer;

import championsProject.Agent;
import championsProject.ChampionsProjectPackage;
import championsProject.Coach;
import championsProject.Competition;
import championsProject.Country;
import championsProject.Fifa;
import championsProject.Player;
import championsProject.President;
import championsProject.Stadium;
import championsProject.Team;
import championsProject.Trophy;
import championsProject.services.XTextGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class XTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ChampionsProjectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ChampionsProjectPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case ChampionsProjectPackage.COACH:
				sequence_Coach(context, (Coach) semanticObject); 
				return; 
			case ChampionsProjectPackage.COMPETITION:
				sequence_Competition(context, (Competition) semanticObject); 
				return; 
			case ChampionsProjectPackage.COUNTRY:
				sequence_Country(context, (Country) semanticObject); 
				return; 
			case ChampionsProjectPackage.FIFA:
				sequence_Fifa(context, (Fifa) semanticObject); 
				return; 
			case ChampionsProjectPackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case ChampionsProjectPackage.PRESIDENT:
				sequence_President(context, (President) semanticObject); 
				return; 
			case ChampionsProjectPackage.STADIUM:
				sequence_Stadium(context, (Stadium) semanticObject); 
				return; 
			case ChampionsProjectPackage.TEAM:
				sequence_Team(context, (Team) semanticObject); 
				return; 
			case ChampionsProjectPackage.TROPHY:
				sequence_Trophy(context, (Trophy) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Person returns Agent
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (name=EString age=EInt? (player+=[Player|EString] player+=[Player|EString]*)? (coach+=[Coach|EString] coach+=[Coach|EString]*)?)
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Coach
	 *     Coach returns Coach
	 *
	 * Constraint:
	 *     (name=EString age=EInt? contrat=EInt? agent=[Agent|EString]?)
	 */
	protected void sequence_Coach(ISerializationContext context, Coach semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Competition returns Competition
	 *
	 * Constraint:
	 *     (name=EString type=CompetitionType? trophy=Trophy team+=Team team+=Team*)
	 */
	protected void sequence_Competition(ISerializationContext context, Competition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Country returns Country
	 *
	 * Constraint:
	 *     (name=EString competition+=Competition competition+=Competition*)
	 */
	protected void sequence_Country(ISerializationContext context, Country semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Fifa returns Fifa
	 *
	 * Constraint:
	 *     (country+=Country country+=Country*)
	 */
	protected void sequence_Fifa(ISerializationContext context, Fifa semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Player
	 *     Player returns Player
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         age=EInt? 
	 *         position=PlayerPosition? 
	 *         status=PlayerStatus? 
	 *         contrat=EInt? 
	 *         agent=[Agent|EString]?
	 *     )
	 */
	protected void sequence_Player(ISerializationContext context, Player semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns President
	 *     President returns President
	 *
	 * Constraint:
	 *     (name=EString age=EInt?)
	 */
	protected void sequence_President(ISerializationContext context, President semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stadium returns Stadium
	 *
	 * Constraint:
	 *     (name=EString capacity=EInt?)
	 */
	protected void sequence_Stadium(ISerializationContext context, Stadium semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Team returns Team
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=TeamType? 
	 *         stadium=Stadium 
	 *         (trophy+=[Trophy|EString] trophy+=[Trophy|EString]*)? 
	 *         president=President 
	 *         coach=Coach 
	 *         player+=Player 
	 *         player+=Player*
	 *     )
	 */
	protected void sequence_Team(ISerializationContext context, Team semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trophy returns Trophy
	 *
	 * Constraint:
	 *     (name=EString (team+=[Team|EString] team+=[Team|EString]*)?)
	 */
	protected void sequence_Trophy(ISerializationContext context, Trophy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
