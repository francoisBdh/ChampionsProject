/**
 * generated by Xtext 2.12.0
 */
package championsProject.formatting2;

import championsProject.Competition;
import championsProject.Country;
import championsProject.Fifa;
import championsProject.services.XTextGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class XTextFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private XTextGrammarAccess _xTextGrammarAccess;
  
  protected void _format(final Fifa fifa, @Extension final IFormattableDocument document) {
    EList<Country> _country = fifa.getCountry();
    for (final Country country : _country) {
      document.<Country>format(country);
    }
  }
  
  protected void _format(final Country country, @Extension final IFormattableDocument document) {
    EList<Competition> _competition = country.getCompetition();
    for (final Competition competition : _competition) {
      document.<Competition>format(competition);
    }
  }
  
  public void format(final Object country, final IFormattableDocument document) {
    if (country instanceof XtextResource) {
      _format((XtextResource)country, document);
      return;
    } else if (country instanceof Country) {
      _format((Country)country, document);
      return;
    } else if (country instanceof Fifa) {
      _format((Fifa)country, document);
      return;
    } else if (country instanceof EObject) {
      _format((EObject)country, document);
      return;
    } else if (country == null) {
      _format((Void)null, document);
      return;
    } else if (country != null) {
      _format(country, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(country, document).toString());
    }
  }
}
